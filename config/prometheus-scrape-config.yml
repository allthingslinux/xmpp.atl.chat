---
# ============================================================================
# PROMETHEUS SCRAPE CONFIGURATION FOR PROSODY XMPP SERVER
# ============================================================================
# Add this configuration to your main Prometheus prometheus.yml file
# under the scrape_configs section

scrape_configs:
  # ============================================================================
  # PROSODY XMPP SERVER METRICS
  # ============================================================================
  - job_name: "xmpp-prosody"
    metrics_path: "/metrics"
    scheme: "http" # Use 'https' if SSL enabled on port 5281
    scrape_interval: 30s
    scrape_timeout: 10s

    static_configs:
      - targets: ["xmpp.atl.chat:5280"] # Change to your domain/IP
        labels:
          service: "prosody"
          environment: "production" # Change as needed
          instance_type: "xmpp_server"
          domain: "atl.chat" # Your XMPP domain

# ============================================================================
# POSTGRESQL DATABASE METRICS (if postgres_exporter is running)
# ============================================================================
# Uncomment if you have postgres_exporter running on your system
# - job_name: 'postgresql-prosody'
#   static_configs:
#     - targets: ['xmpp.atl.chat:9187']  # Default postgres_exporter port
#
#   scrape_interval: 30s
#   static_configs:
#     - targets: ['xmpp.atl.chat:9187']
#       labels:
#         service: 'postgresql'
#         database: 'prosody'
#         environment: 'production'

# ============================================================================
# COTURN TURN/STUN SERVER METRICS (if coturn exporter is available)
# ============================================================================
# Note: Coturn doesn't have built-in Prometheus metrics
# You would need a separate exporter like coturn_exporter
# - job_name: 'coturn-stun'
#   static_configs:
#     - targets: ['xmpp.atl.chat:9641']  # Example coturn_exporter port
#
#   scrape_interval: 30s
#   static_configs:
#     - targets: ['xmpp.atl.chat:9641']
#       labels:
#         service: 'coturn'
#         environment: 'production'
# ============================================================================
# PROSODY METRICS AVAILABLE
# ============================================================================
# The Prosody metrics endpoint provides the following metric families:
#
# Connection Metrics:
# - prosody_c2s_connections_total          # Client connections
# - prosody_s2s_connections_total          # Server-to-server connections
# - prosody_c2s_auth_success_total         # Successful authentications
# - prosody_c2s_auth_failure_total         # Failed authentications
#
# Message Metrics:
# - prosody_messages_sent_total            # Messages sent
# - prosody_messages_received_total        # Messages received
# - prosody_presence_sent_total            # Presence updates sent
# - prosody_presence_received_total        # Presence updates received
#
# Storage Metrics:
# - prosody_storage_operations_total       # Database operations
# - prosody_storage_errors_total           # Storage errors
#
# Module Metrics:
# - prosody_module_*                       # Various module-specific metrics
#
# HTTP Metrics:
# - prosody_http_requests_total            # HTTP requests (BOSH/WebSocket)
# - prosody_http_request_duration_seconds  # HTTP request duration
#
# System Metrics:
# - prosody_memory_usage_bytes             # Memory usage
# - prosody_cpu_usage_seconds_total        # CPU usage
#
# ============================================================================
# GRAFANA DASHBOARD RECOMMENDATIONS
# ============================================================================
# For visualizing these metrics, consider creating dashboards with:
#
# 1. Connection Overview:
#    - Active C2S connections over time
#    - S2S connections by domain
#    - Authentication success/failure rates
#
# 2. Message Flow:
#    - Messages per second
#    - Message types breakdown
#    - Peak usage times
#
# 3. Performance:
#    - Response times
#    - Memory and CPU usage
#    - Storage operation latency
#
# 4. Errors and Health:
#    - Authentication failures
#    - Storage errors
#    - Connection drops
#
# 5. Module-Specific:
#    - File upload statistics
#    - MUC (group chat) activity
#    - Push notification delivery
#
# ============================================================================
# ALERTING RULES EXAMPLES
# ============================================================================
# Add these to your Prometheus alerting rules:
#
# groups:
# - name: prosody.rules
#   rules:
#   - alert: ProsodyDown
#     expr: up{job="xmpp-prosody"} == 0
#     for: 1m
#     labels:
#       severity: critical
#     annotations:
#       summary: "Prosody XMPP server is down"
#       description: "Prosody has been down for more than 1 minute"
#
#   - alert: ProsodyHighAuthFailures
#     expr: rate(prosody_c2s_auth_failure_total[5m]) > 10
#     for: 2m
#     labels:
#       severity: warning
#     annotations:
#       summary: "High authentication failure rate"
#       description: "Authentication failures: {{ $value }} per second"
#
#   - alert: ProsodyHighMemoryUsage
#     expr: prosody_memory_usage_bytes > 500000000  # 500MB
#     for: 5m
#     labels:
#       severity: warning
#     annotations:
#       summary: "Prosody memory usage is high"
#       description: "Memory usage: {{ humanize $value }}B"
