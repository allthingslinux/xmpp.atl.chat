# Professional Prosody XMPP Server
# Complete single-file deployment with all services
# Includes XMPP server, database, monitoring, and TURN/STUN server

services:
  # ============================================================================
  # PROSODY XMPP SERVER
  # ============================================================================
  xmpp-prosody:
    build:
      context: .
      dockerfile: Dockerfile
    image: allthingslinux/prosody:latest
    container_name: xmpp-prosody
    hostname: xmpp-prosody
    restart: unless-stopped

    # Environment variables
    env_file:
      - path: .env
        required: true
    environment:
      # Override database connection for container-to-container communication
      - PROSODY_DB_HOST=xmpp-postgres
      - PROSODY_DB_PORT=5432

    # Port mappings
    ports:
      - '${PROSODY_C2S_PORT:-5222}:5222'        # Client connections (STARTTLS)
      - '${PROSODY_S2S_PORT:-5269}:5269'        # Server connections
      - '${PROSODY_C2S_DIRECT_TLS_PORT:-5223}:5223'  # Client connections (Direct TLS)
      - '${PROSODY_S2S_DIRECT_TLS_PORT:-5270}:5270'  # Server connections (Direct TLS)
      - '${PROSODY_HTTP_PORT:-5280}:5280'       # HTTP services (WebSocket, BOSH, upload, admin)
      - '${PROSODY_HTTPS_PORT:-5281}:5281'      # HTTPS services (secure web services)

    # Volume mounts
    volumes:
      # Configuration (read-only)
      - ./core/config:/etc/prosody/config:ro

      # Data persistence
      - xmpp_prosody_data:/var/lib/prosody/data
      - xmpp_prosody_uploads:/var/lib/prosody/uploads

      # SSL certificates (local directory for easier management)
      - ./.runtime/certs:/etc/prosody/certs

      # Scripts (for certificate management)
      - ./scripts:/opt/prosody/scripts:ro

      # Logs (local directory for easier access)
      - ./.runtime/logs:/var/log/prosody

    # Health check
    healthcheck:
      test: ['CMD', '/usr/local/bin/health-check.sh']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Production security settings
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'

    # Production sysctls for high performance
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.ip_local_port_range=1024 65535

    # Ulimits for high concurrency
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 32768
        hard: 32768

    # Production logging
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
        compress: 'true'

    # Dependencies
    depends_on:
      xmpp-postgres:
        condition: service_healthy

    # Networks
    networks:
      - xmpp_network

  # ============================================================================
  # POSTGRESQL DATABASE
  # ============================================================================
  xmpp-postgres:
    image: postgres:17-alpine
    container_name: xmpp-postgres
    hostname: xmpp-postgres
    restart: unless-stopped

    # Environment variables automatically loaded from .env file
    env_file:
      - path: .env
        required: true
    environment:
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

    volumes:
      - xmpp_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    # Production PostgreSQL optimization
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB

    # Security settings
    security_opt:
      - no-new-privileges:true

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'

    # Health check
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER:-prosody}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Networks
    networks:
      - xmpp_network

  # ============================================================================
  # COTURN - TURN/STUN SERVER (for voice/video calls)
  # ============================================================================
  xmpp-coturn:
    image: coturn/coturn:latest
    container_name: xmpp-coturn
    hostname: xmpp-coturn
    restart: unless-stopped
    
    # Environment variables automatically loaded from .env file
    env_file:
      - path: .env
        required: true
    
    ports:
      # STUN/TURN ports (environment variables loaded from .env)
      - '${TURN_PORT:-3478}:3478'
      - '${TURN_PORT:-3478}:3478/udp'
      - '${TURNS_PORT:-5349}:5349'
      - '${TURNS_PORT:-5349}:5349/udp'
      # Relay ports range
      - '${TURN_MIN_PORT:-49152}-${TURN_MAX_PORT:-65535}:49152-65535/udp'
    
    environment:
      # Fixed security settings
      - TURN_NO_LOOPBACK_PEERS=true
      - TURN_NO_MULTICAST_PEERS=true
      - TURN_STALE_NONCE=true
      - TURN_SECURE_STUN=true
      # Fixed logging
      - TURN_LOG_FILE=stdout
      - TURN_VERBOSE=false
    
    volumes:
      - xmpp_coturn_data:/var/lib/coturn
    
    command: >
      turnserver
        --listening-port=3478
        --tls-listening-port=5349
        --min-port=49152
        --max-port=65535
        --realm=$${TURN_REALM:-localhost}
        --server-name=$${TURN_DOMAIN:-localhost}
        --lt-cred-mech
        --user=$${TURN_USERNAME:-prosody}:$${TURN_PASSWORD:-changeme}
        --use-auth-secret
        --static-auth-secret=$${TURN_SECRET:-changeme}
        --no-loopback-peers
        --no-multicast-peers
        --mobility
        --no-cli
        --no-tlsv1
        --no-tlsv1_1
        --cipher-list=ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS
        --no-sslv2
        --no-sslv3
        --log-file=stdout
        --simple-log
    
    networks:
      - xmpp_network
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '1.0'
        reservations:
          memory: 64M
          cpus: '0.25'



  # ============================================================================
  # CERTIFICATE MANAGEMENT SERVICES
  # ============================================================================
  
  # Let's Encrypt certificate generation (DNS-01 challenge for wildcard support)
  xmpp-certbot:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot
    hostname: xmpp-certbot
    
    # Environment variables automatically loaded from .env file
    env_file:
      - path: .env
        required: true
    
    volumes:
      - ./certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro
    # Environment variables automatically loaded from .env file
    command: >
      certonly
      --dns-cloudflare
      --dns-cloudflare-credentials=/etc/letsencrypt/cloudflare-credentials.ini
      --dns-cloudflare-propagation-seconds=60
      --email ${LETSENCRYPT_EMAIL:-admin@allthingslinux.org}
      --agree-tos
      --no-eff-email
      --expand
      --non-interactive
      -d ${PROSODY_DOMAIN:-atl.chat}
      -d "*.${PROSODY_DOMAIN:-atl.chat}"
    profiles:
      - letsencrypt
    networks:
      - xmpp_network

  # Certificate renewal service
  xmpp-certbot-renew:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot-renew
    hostname: xmpp-certbot-renew
    
    # Environment variables automatically loaded from .env file
    env_file:
      - path: .env
        required: true
    
    volumes:
      - ./certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro
    command: renew --quiet
    profiles:
      - renewal
    networks:
      - xmpp_network

  # ============================================================================
  # ADMINER - DATABASE MANAGEMENT
  # ============================================================================
  xmpp-adminer:
    image: adminer
    container_name: xmpp-adminer
    hostname: xmpp-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    env_file:
      - path: .env
        required: true
    environment:
      ADMINER_DEFAULT_DRIVER: "pgsql"
      ADMINER_DEFAULT_SERVER: "xmpp-postgres"
      ADMINER_DEFAULT_DB: ${POSTGRES_DB}
      ADMINER_DEFAULT_USERNAME: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["sh", "-c", "php -S 0.0.0.0:8080 -t /var/www/html"]
    configs:
      - source: adminer-index.php
        target: /var/www/html/index.php
      - source: adminer-theme.css
        target: /var/www/html/adminer.css
    depends_on:
      xmpp-postgres:
        condition: service_healthy
    networks:
      - xmpp_network

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  xmpp_prosody_data:
    driver: local
    name: xmpp_prosody_data
  xmpp_prosody_uploads:
    driver: local
    name: xmpp_prosody_uploads
  xmpp_postgres_data:
    driver: local
    name: xmpp_postgres_data
  xmpp_coturn_data:
    driver: local
    name: xmpp_coturn_data

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  xmpp_network:
    name: xmpp_network

# ============================================================================
# CONFIGS
# ============================================================================
configs:
  adminer-index.php:
    content: |
      <?php
        // Only auto-login in development environments
        if (getenv('ADMINER_AUTO_LOGIN') === 'true' && empty($$_GET)) {
          $$_POST['auth'] = [
            'server' => getenv('ADMINER_DEFAULT_SERVER'),
            'username' => getenv('ADMINER_DEFAULT_USERNAME'),
            'password' => getenv('ADMINER_DEFAULT_PASSWORD'),
            'driver' => getenv('ADMINER_DEFAULT_DRIVER'),
            'db' => getenv('ADMINER_DEFAULT_DB'),
          ];
        }
        include './adminer.php';
      ?>

  adminer-theme.css:
    file: ./examples/adminer-theme.css
