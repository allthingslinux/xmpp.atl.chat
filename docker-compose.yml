# ============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# Professional Prosody XMPP Server - Production Environment
# ============================================================================
# Optimized configuration with resource limits and security settings
# Usage: docker compose up -d

name: xmpp-server

services:
  # ============================================================================
  # PROSODY XMPP SERVER
  # ============================================================================
  xmpp-prosody:
    build:
      context: .
      dockerfile: Dockerfile
    image: allthingslinux/prosody:latest
    container_name: xmpp-prosody
    hostname: xmpp-prosody
    restart: unless-stopped
    init: true
    env_file:
      - path: .env.production
        required: false  # Allow running without env file for backwards compatibility
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    # All configuration comes from .env.production file
    # No hardcoded environment variables
    ports:
      - '${PROSODY_C2S_PORT:-5222}:5222'
      - '${PROSODY_S2S_PORT:-5269}:5269'
      - '${PROSODY_C2S_DIRECT_TLS_PORT:-5223}:5223'
      - '${PROSODY_S2S_DIRECT_TLS_PORT:-5270}:5270'
      - '${PROSODY_HTTP_PORT:-5280}:5280'
      - '${PROSODY_HTTPS_PORT:-5281}:5281'
      - '${PROSODY_PROXY65_PORT:-5000}:5000'
    volumes:
      - ./app/config:ro:/etc/prosody/config:ro
      - xmpp_prosody_data:/var/lib/prosody/data
      - xmpp_prosody_uploads:/var/lib/prosody/uploads
      - ./.runtime/certs:/etc/prosody/certs
      - ./scripts:/opt/prosod./scripts:ro
      - ./.runtime/logs:/var/log/prosody
      - ./web/assets:ro:/usr/share/prosody/www:ro
    healthcheck:
      test: ['CMD', '/usr/local/bin/health-check.sh']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    stop_grace_period: 60s
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    # Production sysctls for high performance
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.ip_local_port_range=1024 65535
    # Ulimits for high concurrency
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 32768
        hard: 32768
    depends_on:
      xmpp-postgres:
        condition: service_healthy
    networks:
      - xmpp_network

  # ============================================================================
  # NGINX REVERSE PROXY (Production)
  # ============================================================================
  xmpp-nginx:
    image: nginx:stable
    container_name: xmpp-nginx
    hostname: xmpp-nginx
    restart: unless-stopped
    init: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    stop_signal: SIGQUIT
    stop_grace_period: 30s
    volumes:
      - ./deploy/reverse-proxy/nginx/nginx-docker.conf:/etc/nginx/nginx.conf:ro
      - ./.runtime/certs:/opt/xmpp.atl.chat/certs:ro
      - ./web/assets:ro:/usr/share/nginx/html:ro
    depends_on:
      - xmpp-prosody
    networks:
      - xmpp_network

  xmpp-conversejs:
    image: nginx:stable-alpine
    container_name: xmpp-conversejs
    hostname: xmpp-conversejs
    restart: unless-stopped
    init: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    volumes:
      - ./web/conversejs:/usr/share/nginx/html:ro
    depends_on:
      - xmpp-prosody
    stop_signal: SIGQUIT
    stop_grace_period: 30s
    networks:
      - xmpp_network

  # ============================================================================
  # POSTGRESQL DATABASE
  # ============================================================================
  xmpp-postgres:
    image: postgres:17-alpine
    container_name: xmpp-postgres
    hostname: xmpp-postgres
    restart: unless-stopped
    stop_signal: SIGTERM
    stop_grace_period: 60s
    env_file:
      - path: .env.production
        required: false
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    environment:
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - xmpp_postgres_data:/var/lib/postgresql/data
      - ./core/database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    # Production PostgreSQL optimization
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-prosody}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - xmpp_network

  # ============================================================================
  # COTURN - TURN/STUN SERVER
  # ============================================================================
  xmpp-coturn:
    image: coturn/coturn:latest
    container_name: xmpp-coturn
    hostname: xmpp-coturn
    restart: unless-stopped
    env_file:
      - path: .env.production
        required: false
    environment:
      - TURN_SECRET=${TURN_SECRET}
      - TURN_DOMAIN=${TURN_DOMAIN}
      - TURN_REALM=${TURN_REALM}
    command: ["-c", "/etc/turnserver.conf"]
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    ports:
      - '${TURN_PORT:-3478}:3478'
      - '${TURN_PORT:-3478}:3478/udp'
      - '${TURNS_PORT:-5349}:5349'
      - '${TURNS_PORT:-5349}:5349/udp'
      - '${TURN_MIN_PORT:-50000}-${TURN_MAX_PORT:-50100}:50000-50100/udp'

    volumes:
      - xmpp_coturn_data:/var/lib/coturn
      - ./.runtime/turn/turnserver.conf:/etc/turnserver.conf:ro
      - ./.runtime/certs:/etc/ssl:ro
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '1.0'
        reservations:
          memory: 64M
          cpus: '0.25'
    networks:
      - xmpp_network

  # ============================================================================
  # ADMINER - DATABASE MANAGEMENT
  # ============================================================================
  # xmpp-adminer:
  #   image: adminer:latest
  #   container_name: xmpp-adminer
  #   hostname: xmpp-adminer
  #   restart: unless-stopped
  #   env_file:
  #     - path: .env
  #       required: true
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "50m"
  #       max-file: "5"
  #       compress: "true"
  #   ports:
  #     - '${ADMINER_PORT:-8080}:8080'
  #   environment:
  #     ADMINER_DEFAULT_DRIVER: "pgsql"
  #     ADMINER_DEFAULT_SERVER: "xmpp-postgres"
  #     ADMINER_DEFAULT_DB: ${POSTGRES_DB:-prosody}
  #     ADMINER_DEFAULT_USERNAME: ${POSTGRES_USER:-prosody}
  #     ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
  #     ADMINER_AUTO_LOGIN: ${ADMINER_AUTO_LOGIN:-false}
  #   command: ["sh", "-c", "php -S 0.0.0.0:8080 -t /var/www/html"]
  #   configs:
  #     - source: adminer-index.php
  #       target: /var/www/html/index.php
  #     - source: adminer-theme.css
  #       target: /var/www/html/adminer.css
  #   # depends_on:
  #   #   xmpp-postgres:
  #   #     condition: service_healthy
  #   networks:
  #     - xmpp_network

  # ============================================================================
  # CERTIFICATE MANAGEMENT SERVICES
  # ============================================================================
  xmpp-certbot:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot
    hostname: xmpp-certbot
    profiles: ["cert-issue"]
    env_file:
      - path: .env.production
        required: false
    volumes:
      - ./.runtime/certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro
    command: >
      certonly
      --dns-cloudflare
      --dns-cloudflare-credentials=/etc/letsencrypt/cloudflare-credentials.ini
      --dns-cloudflare-propagation-seconds=60
      --email ${LETSENCRYPT_EMAIL:-admin@example.com}
      --agree-tos
      --no-eff-email
      --expand
      --non-interactive
      -d ${PROSODY_DOMAIN:-example.com}
      -d "*.${PROSODY_DOMAIN:-example.com}"
    networks:
      - xmpp_network

  xmpp-certbot-renew:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot-renew
    hostname: xmpp-certbot-renew
    env_file:
      - path: .env.production
        required: false
    volumes:
      - ./.runtime/certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro
    command: renew --quiet --no-random-sleep-on-renew
    networks:
      - xmpp_network

  # Removed separate service-host issuer; atl.chat wildcard covers xmpp.atl.chat

  xmpp-cert-monitor:
    image: alpine:latest
    container_name: xmpp-cert-monitor
    hostname: xmpp-cert-monitor
    env_file:
      - path: .env.production
        required: false
    init: true
    volumes:
      - ./.runtime:/ap./.runtime
      - ./scripts:/ap./scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    working_dir: /app
    command: >
      sh -c "
        apk add --no-cache bash curl jq openssl docker-cli &&
        /ap./scripts/cert-monitor-runner.sh
      "
    stop_grace_period: 10s
    networks:
      - xmpp_network
    restart: unless-stopped
    depends_on:
      - xmpp-prosody

  

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  xmpp_prosody_data:
    driver: local
    name: xmpp_prosody_data
  xmpp_prosody_uploads:
    driver: local
    name: xmpp_prosody_uploads
  xmpp_postgres_data:
    driver: local
    name: xmpp_postgres_data
  xmpp_coturn_data:
    driver: local
    name: xmpp_coturn_data

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  xmpp_network:
    name: xmpp_network
    driver: bridge
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16

# ============================================================================
# CONFIGS
# ============================================================================
# configs:
#   adminer-index.php:
#     content: |
#       <?php
#         // Only auto-login in development environments
#         if (getenv('ADMINER_AUTO_LOGIN') === 'true' && empty($$_GET)) {
#           $$_POST['auth'] = [
#             'server' => getenv('ADMINER_DEFAULT_SERVER'),
#             'username' => getenv('ADMINER_DEFAULT_USERNAME'),
#             'password' => getenv('ADMINER_DEFAULT_PASSWORD'),
#             'driver' => getenv('ADMINER_DEFAULT_DRIVER'),
#             'db' => getenv('ADMINER_DEFAULT_DB'),
#           ];
#         }
#         include './adminer.php';
#       ?>

#   adminer-theme.css:
#     file: ./web/themes/adminer-theme.css