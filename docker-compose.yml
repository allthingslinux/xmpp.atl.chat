# ============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# ============================================================================
# Professional Prosody XMPP Server - Production Environment
# ============================================================================
# Optimized configuration with resource limits and security settings
# Usage: docker compose up -d

name: xmpp-server

services:
  # ============================================================================
  # PROSODY XMPP SERVER (Production)
  # ============================================================================
  xmpp-prosody:
    build:
      context: .
      dockerfile: Dockerfile
    image: allthingslinux/prosody:latest
    container_name: xmpp-prosody
    hostname: xmpp-prosody
    restart: unless-stopped
    init: true

    # Environment configuration
    env_file:
      - path: .env.production
        required: true

    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

    # Port mappings
    ports:
      - '${PROSODY_C2S_PORT:-5222}:5222'              # XMPP client connections
      - '${PROSODY_S2S_PORT:-5269}:5269'              # XMPP server-to-server
      - '${PROSODY_C2S_DIRECT_TLS_PORT:-5223}:5223'   # XMPP client TLS
      - '${PROSODY_S2S_DIRECT_TLS_PORT:-5270}:5270'   # XMPP server-to-server TLS
      - '${PROSODY_HTTP_PORT:-5280}:5280'             # HTTP/BOSH
      - '${PROSODY_HTTPS_PORT:-5281}:5281'            # HTTPS/BOSH
      - '${PROSODY_PROXY65_PORT:-5000}:5000'          # Proxy65 file transfers

    # Volume mounts
    volumes:
      - ./app/config:/etc/prosody/config:ro              # Prosody configuration
      - ./scripts:/opt/prosody/scripts:ro                # Utility scripts
      - ./.runtime/certs:/etc/prosody/certs              # SSL certificates
      - ./.runtime/logs:/var/log/prosody                 # Log files
      - ./web/assets:/usr/share/prosody/www:ro           # Web assets
      - xmpp_prosody_data:/var/lib/prosody/data          # Persistent data
      - xmpp_prosody_uploads:/var/lib/prosody/uploads    # File uploads

    # Health monitoring
    healthcheck:
      test: ['CMD', '/usr/local/bin/health-check.sh']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'

    # System optimizations
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.ip_local_port_range=1024 65535
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 32768
        hard: 32768

    # Service dependencies
    depends_on:
      xmpp-postgres:
        condition: service_healthy

    # Network configuration
    networks:
      - xmpp_network

    # Graceful shutdown
    stop_grace_period: 60s

  # ============================================================================
  # NGINX REVERSE PROXY (Production)
  # ============================================================================
  xmpp-nginx:
    image: nginx:stable
    container_name: xmpp-nginx
    hostname: xmpp-nginx
    restart: unless-stopped
    init: true

    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

    # Port mappings
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'      # HTTP
      - '${NGINX_HTTPS_PORT:-443}:443'    # HTTPS

    # Volume mounts
    volumes:
      - ./config/nginx-docker.conf:/etc/nginx/nginx.conf:ro
      - ./.runtime/certs:/opt/xmpp.atl.chat/certs:ro
      - ./web/assets:/usr/share/nginx/html:ro

    # Service dependencies
    depends_on:
      - xmpp-prosody

    # Network configuration
    networks:
      - xmpp_network

    # Graceful shutdown
    stop_signal: SIGQUIT
    stop_grace_period: 30s

  # ============================================================================
  # CONVERSE.JS WEB CLIENT (Production)
  # ============================================================================
  xmpp-conversejs:
    image: nginx:stable-alpine
    container_name: xmpp-conversejs
    hostname: xmpp-conversejs
    restart: unless-stopped
    init: true

    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

    # Volume mounts
    volumes:
      - ./web/conversejs:/usr/share/nginx/html:ro

    # Service dependencies
    depends_on:
      - xmpp-prosody

    # Network configuration
    networks:
      - xmpp_network

    # Graceful shutdown
    stop_signal: SIGQUIT
    stop_grace_period: 30s

  # ============================================================================
  # POSTGRESQL DATABASE (Production)
  # ============================================================================
  xmpp-postgres:
    image: postgres:17-alpine
    container_name: xmpp-postgres
    hostname: xmpp-postgres
    restart: unless-stopped

    # Environment configuration
    env_file:
      - path: .env.production
        required: false

    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

    # Database initialization
    environment:
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

    # Volume mounts
    volumes:
      - xmpp_postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    # Database optimization for production
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'

    # Health monitoring
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-prosody}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Network configuration
    networks:
      - xmpp_network

    # Graceful shutdown
    stop_signal: SIGTERM
    stop_grace_period: 60s

  # ============================================================================
  # COTURN - TURN/STUN SERVER (Production)
  # ============================================================================
  xmpp-coturn:
    image: coturn/coturn:latest
    container_name: xmpp-coturn
    hostname: xmpp-coturn
    restart: unless-stopped

    # Environment configuration
    env_file:
      - path: .env.production
        required: false

    # TURN server configuration
    environment:
      - TURN_SECRET=${TURN_SECRET:-"your-turn-secret-here"}
      - TURN_DOMAIN=${TURN_DOMAIN:-"your-domain.com"}
      - TURN_REALM=${TURN_REALM:-"your-domain.com"}

    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

    # Port mappings for TURN/STUN
    ports:
      - '${TURN_PORT:-3478}:3478'                   # TURN/STUN primary
      - '${TURN_PORT:-3478}:3478/udp'              # TURN/STUN primary UDP
      - '${TURNS_PORT:-5349}:5349'                  # TURN/STUN TLS
      - '${TURNS_PORT:-5349}:5349/udp'             # TURN/STUN TLS UDP
      - '${TURN_MIN_PORT:-50000}-${TURN_MAX_PORT:-50100}:50000-50100/udp'  # Relay ports

    # Volume mounts
    volumes:
      - xmpp_coturn_data:/var/lib/coturn
      - ./.runtime/turn/turnserver.conf:/etc/turnserver.conf:ro
      - ./.runtime/certs:/etc/ssl:ro

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '1.0'
        reservations:
          memory: 64M
          cpus: '0.25'

    # TURN server command
    command: ["-c", "/etc/turnserver.conf"]

    # Network configuration
    networks:
      - xmpp_network

  # ============================================================================
  # CERTBOT - SSL CERTIFICATE ISSUANCE (Production)
  # ============================================================================
  xmpp-certbot:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot
    hostname: xmpp-certbot
    profiles: ["cert-issue"]

    # Environment configuration
    env_file:
      - path: .env.production
        required: true

    # Volume mounts
    volumes:
      - ./.runtime/certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro

    # SSL certificate issuance command
    command: >
      certonly
      --dns-cloudflare
      --dns-cloudflare-credentials=/etc/letsencrypt/cloudflare-credentials.ini
      --dns-cloudflare-propagation-seconds=60
      --email ${LETSENCRYPT_EMAIL:-admin@example.com}
      --agree-tos
      --no-eff-email
      --expand
      --non-interactive
      -d ${PROSODY_DOMAIN:-example.com}
      -d "*.${PROSODY_DOMAIN:-example.com}"

    # Network configuration
    networks:
      - xmpp_network

  # ============================================================================
  # CERTBOT - SSL CERTIFICATE RENEWAL (Production)
  # ============================================================================
  xmpp-certbot-renew:
    image: certbot/dns-cloudflare:latest
    container_name: xmpp-certbot-renew
    hostname: xmpp-certbot-renew

    # Environment configuration
    env_file:
      - path: .env.production
        required: false

    # Volume mounts
    volumes:
      - ./.runtime/certs:/etc/letsencrypt
      - ./cloudflare-credentials.ini:/etc/letsencrypt/cloudflare-credentials.ini:ro

    # SSL certificate renewal command
    command: renew --quiet --no-random-sleep-on-renew

    # Network configuration
    networks:
      - xmpp_network

  # ============================================================================
  # CERTIFICATE MONITORING (Production)
  # ============================================================================
  xmpp-cert-monitor:
    image: alpine:latest
    container_name: xmpp-cert-monitor
    hostname: xmpp-cert-monitor

    # Environment configuration
    env_file:
      - path: .env.production
        required: false

    # Volume mounts
    volumes:
      - ./.runtime:/app/.runtime
      - ./scripts:/app/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

    # Working directory
    working_dir: /app

    # Certificate monitoring command
    command: >
      sh -c "
        apk add --no-cache bash curl jq openssl docker-cli &&
        /app/scripts/cert-monitor-runner.sh
      "

    # Service configuration
    init: true
    restart: unless-stopped

    # Service dependencies
    depends_on:
      - xmpp-prosody

    # Network configuration
    networks:
      - xmpp_network

    # Graceful shutdown
    stop_grace_period: 10s

# ============================================================================
# PRODUCTION VOLUMES
# ============================================================================
volumes:
  xmpp_prosody_data:
    driver: local
    name: xmpp_prosody_data
  xmpp_prosody_uploads:
    driver: local
    name: xmpp_prosody_uploads
  xmpp_postgres_data:
    driver: local
    name: xmpp_postgres_data
  xmpp_coturn_data:
    driver: local
    name: xmpp_coturn_data

# ============================================================================
# PRODUCTION NETWORKS
# ============================================================================
networks:
  xmpp_network:
    name: xmpp_network
    driver: bridge