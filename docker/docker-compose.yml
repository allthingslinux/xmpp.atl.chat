version: '3.8'

# Professional Prosody XMPP Server
# Production-ready single-profile deployment
# Matches the simplified prosody.cfg.lua configuration

services:
  # ============================================================================
  # PROSODY XMPP SERVER
  # ============================================================================
  prosody:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: professional-prosody:latest
    container_name: prosody
    hostname: prosody
    restart: unless-stopped

    # Essential environment configuration only
    environment:
      # Domain settings (required)
      - PROSODY_DOMAIN=${PROSODY_DOMAIN:-localhost}
      - PROSODY_ADMINS=${PROSODY_ADMINS:-admin@localhost}

      # Database configuration (production default: PostgreSQL)
      - PROSODY_STORAGE=sql
      - PROSODY_DB_DRIVER=PostgreSQL
      - PROSODY_DB_NAME=${PROSODY_DB_NAME:-prosody}
      - PROSODY_DB_USER=${PROSODY_DB_USER:-prosody}
      - PROSODY_DB_PASSWORD=${PROSODY_DB_PASSWORD:-prosody}
      - PROSODY_DB_HOST=db
      - PROSODY_DB_PORT=5432

      # Security credentials (optional, for enhanced security)
      - PROSODY_LDAP_PASSWORD=${PROSODY_LDAP_PASSWORD:-}
      - PROSODY_OAUTH_CLIENT_SECRET=${PROSODY_OAUTH_CLIENT_SECRET:-}
      - TURN_SECRET=${TURN_SECRET:-changeme}

      # Optional overrides (production defaults used if not set)
      - PROSODY_LOG_LEVEL=${PROSODY_LOG_LEVEL:-info}
      - PROSODY_ALLOW_REGISTRATION=${PROSODY_ALLOW_REGISTRATION:-false}
      - PROSODY_UPLOAD_SIZE_LIMIT=${PROSODY_UPLOAD_SIZE_LIMIT:-50485760}

    # Port mappings
    ports:
      - '${PROSODY_C2S_PORT:-5222}:5222'        # Client connections (STARTTLS)
      - '${PROSODY_S2S_PORT:-5269}:5269'        # Server connections
      - '${PROSODY_C2S_DIRECT_TLS_PORT:-5223}:5223'  # Client connections (Direct TLS)
      - '${PROSODY_S2S_DIRECT_TLS_PORT:-5270}:5270'  # Server connections (Direct TLS)
      - '${PROSODY_HTTP_PORT:-5280}:5280'       # HTTP (BOSH/WebSocket/Admin)
      - '${PROSODY_HTTPS_PORT:-5281}:5281'      # HTTPS (BOSH/WebSocket/Admin)

    # Volume mounts
    volumes:
      # Configuration (read-only)
      - ./config:/etc/prosody/config:ro

      # Data persistence
      - prosody_data:/var/lib/prosody/data
      - prosody_uploads:/var/lib/prosody/uploads

      # SSL certificates
      - prosody_certs:/etc/prosody/certs

      # Logs
      - prosody_logs:/var/log/prosody

    # Health check
    healthcheck:
      test: ['CMD', '/opt/prosody/scripts/health-check.sh']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Production security settings
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'

    # Production sysctls for high performance
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.ip_local_port_range=1024 65535

    # Ulimits for high concurrency
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 32768
        hard: 32768

    # Production logging
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
        compress: 'true'

    # Dependencies
    depends_on:
      db:
        condition: service_healthy

    # Networks
    networks:
      - prosody_network

  # ============================================================================
  # POSTGRESQL DATABASE
  # ============================================================================
  db:
    image: postgres:15-alpine
    container_name: prosody-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${PROSODY_DB_NAME:-prosody}
      - POSTGRES_USER=${PROSODY_DB_USER:-prosody}
      - POSTGRES_PASSWORD=${PROSODY_DB_PASSWORD:-prosody}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    # Production PostgreSQL optimization
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB

    # Security settings
    security_opt:
      - no-new-privileges:true

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'

    # Health check
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${PROSODY_DB_USER:-prosody}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Networks
    networks:
      - prosody_network

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  prosody_data:
    driver: local
  prosody_uploads:
    driver: local
  prosody_certs:
    driver: local
  prosody_logs:
    driver: local
  postgres_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  prosody_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
