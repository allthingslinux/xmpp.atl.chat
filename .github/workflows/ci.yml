name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.sh'
      - 'prosody-manager'
      - '**/*.lua'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - '**/*.md'
      - 'Dockerfile'
      - '**/*.sql'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.sh'
      - 'prosody-manager'
      - '**/*.lua'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - '**/*.md'
      - 'Dockerfile'
      - '**/*.sql'
      - '.github/workflows/ci.yml'

jobs:
  shell-lint:
    name: Shell Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run shellcheck with pre-built action
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          additional_files: 'prosody-manager'
          severity: error
          
      - name: Find all shell scripts
        id: find-scripts
        run: |
          # Find all shell scripts in the repository
          scripts=$(find . -type f \( -name "*.sh" -o -name "prosody-manager" \) -not -path "./.git/*" | sort)
          echo "Found shell scripts:"
          echo "$scripts"
          
          # Output for next step
          echo "scripts<<EOF" >> $GITHUB_OUTPUT
          echo "$scripts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Run comprehensive shellcheck
        run: |
          echo "Running comprehensive shellcheck on all shell scripts..."
          exit_code=0
          
          while IFS= read -r script; do
            if [ -n "$script" ]; then
              echo "Checking: $script"
              if ! shellcheck -f gcc "$script"; then
                echo "‚ùå Shellcheck failed for: $script"
                exit_code=1
              else
                echo "‚úÖ Shellcheck passed for: $script"
              fi
              echo ""
            fi
          done <<< "${{ steps.find-scripts.outputs.scripts }}"
          
          if [ $exit_code -ne 0 ]; then
            echo "‚ùå Shellcheck found issues in one or more scripts"
            exit 1
          else
            echo "‚úÖ All scripts passed shellcheck"
          fi

  shell-format:
    name: Shell Formatting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install shfmt
        run: |
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          
      - name: Find shell scripts
        id: find-scripts
        run: |
          scripts=$(find . -type f \( -name "*.sh" -o -name "prosody-manager" \) -not -path "./.git/*" | sort)
          echo "scripts<<EOF" >> $GITHUB_OUTPUT
          echo "$scripts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Check shell script formatting
        run: |
          echo "Checking shell script formatting with shfmt..."
          
          # Simple check using file list
          files=$(find . -name "*.sh" -o -name "prosody-manager" | grep -v ".git")
          
          if ! shfmt -d -i 4 -ci $files; then
            echo "‚ùå Shell scripts are not properly formatted"
            echo "Run 'shfmt -w -i 4 -ci .' to fix formatting"
            exit 1
          fi
          
          echo "‚úÖ All shell scripts are properly formatted"
          
      - name: Detailed format check with feedback
        if: failure()
        run: |
          echo "Checking format for each script individually..."
          exit_code=0
          
          while IFS= read -r script; do
            if [ -n "$script" ]; then
              echo "Checking format: $script"
              if ! shfmt -d -i 4 -ci "$script"; then
                echo "‚ùå Format check failed for: $script"
                exit_code=1
              else
                echo "‚úÖ Format check passed for: $script"
              fi
              echo ""
            fi
          done <<< "${{ steps.find-scripts.outputs.scripts }}"
          
      - name: Generate formatting suggestions
        if: failure()
        run: |
          echo "## Formatting Suggestions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix formatting issues, run the following commands:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Install shfmt" >> $GITHUB_STEP_SUMMARY
          echo "go install mvdan.cc/sh/v3/cmd/shfmt@latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Format all shell scripts" >> $GITHUB_STEP_SUMMARY
          echo "shfmt -w -i 4 -ci ." >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This will:" >> $GITHUB_STEP_SUMMARY
          echo "- Use 4 spaces for indentation (-i 4)" >> $GITHUB_STEP_SUMMARY
          echo "- Indent switch cases (-ci)" >> $GITHUB_STEP_SUMMARY
          echo "- Write changes back to files (-w)" >> $GITHUB_STEP_SUMMARY

  shell-security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
      - name: Run security-focused shellcheck
        run: |
          echo "Running security-focused shellcheck analysis..."
          
          # Find all shell scripts
          scripts=$(find . -type f \( -name "*.sh" -o -name "prosody-manager" \) -not -path "./.git/*")
          
          exit_code=0
          security_issues=0
          
          for script in $scripts; do
            echo "Security analysis: $script"
            
            # Run shellcheck with focus on security issues
            if ! shellcheck -S error -f json "$script" > /tmp/shellcheck_output.json; then
              # Parse JSON output for security-related issues
              if command -v jq >/dev/null 2>&1; then
                jq -r '.[] | select(.level == "error") | "Line \(.line): \(.message)"' /tmp/shellcheck_output.json || true
              else
                cat /tmp/shellcheck_output.json
              fi
              security_issues=$((security_issues + 1))
              exit_code=1
            fi
          done
          
          if [ $security_issues -gt 0 ]; then
            echo "‚ùå Found $security_issues security issues"
            exit 1
          else
            echo "‚úÖ No security issues found"
          fi

  shell-best-practices:
    name: Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check shell script best practices
        run: |
          echo "Checking shell scripts for best practices..."
          
          scripts=$(find . -type f \( -name "*.sh" -o -name "prosody-manager" \) -not -path "./.git/*")
          issues=0
          warnings=0
          
          for script in $scripts; do
            echo "Checking best practices: $script"
            
            # Check for set -euo pipefail
            if ! grep -q "set -euo pipefail" "$script"; then
              echo "‚ö†Ô∏è  Missing 'set -euo pipefail' in $script"
              warnings=$((warnings + 1))
            fi
            
            # Check for proper shebang
            if ! head -n1 "$script" | grep -q "^#!/bin/bash"; then
              echo "‚ö†Ô∏è  Missing or incorrect shebang in $script"
              warnings=$((warnings + 1))
            fi
            
            # Check for unquoted variables (basic check)
            if grep -n '\$[A-Za-z_][A-Za-z0-9_]*[^"'\''}\]]' "$script" | grep -v '#' | head -3; then
              echo "‚ö†Ô∏è  Potentially unquoted variables found in $script (sample lines shown above)"
              warnings=$((warnings + 1))
            fi
            
            # Check for command substitution without quotes
            if grep -n '`.*`' "$script" | head -3; then
              echo "‚ö†Ô∏è  Old-style command substitution found in $script (use \$(...) instead)"
              warnings=$((warnings + 1))
            fi
          done
          
          echo ""
          echo "üìä Best Practices Summary:"
          if [ $warnings -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $warnings best practice warnings"
            echo "üí° These are recommendations, not errors"
          else
            echo "‚úÖ All scripts follow recommended best practices"
          fi
          
          # Generate summary
          echo "## Best Practices Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $warnings -gt 0 ]; then
            echo "‚ö†Ô∏è Found $warnings best practice recommendations" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY
            echo "- Add \`set -euo pipefail\` to the beginning of scripts for better error handling" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure all scripts start with \`#!/bin/bash\`" >> $GITHUB_STEP_SUMMARY
            echo "- Quote variables to prevent word splitting: \`\"\$variable\"\`" >> $GITHUB_STEP_SUMMARY
            echo "- Use modern command substitution: \`\$(command)\` instead of \`\`command\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ All scripts follow recommended best practices!" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Don't fail the job for best practices, just warn
          exit 0

  lua-check:
    name: Lua Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install luacheck
        run: |
          sudo apt-get update
          sudo apt-get install -y luarocks
          sudo luarocks install luacheck
          
      - name: Find Lua files
        id: find-lua
        run: |
          lua_files=$(find . -name "*.lua" -not -path "./.git/*" | sort)
          echo "Found Lua files:"
          echo "$lua_files"
          
          if [ -z "$lua_files" ]; then
            echo "No Lua files found"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Run luacheck
        if: steps.find-lua.outputs.skip == 'false'
        run: |
          echo "Running luacheck on Lua files..."
          
          # Create luacheck config for Prosody
          cat > .luacheckrc << 'EOF'
          -- Luacheck configuration for Prosody XMPP server
          std = "lua54"
          
          -- Prosody globals
          globals = {
            "prosody", "hosts", "module", "require", "VirtualHost", "Component",
            "log", "error", "warn", "info", "debug"
          }
          
          -- Ignore some common patterns
          ignore = {
            "212", -- Unused argument (common in Prosody modules)
            "213", -- Unused loop variable
          }
          
          -- File-specific settings
          files["core/config/prosody.cfg.lua"] = {
            globals = {"ssl", "authentication", "modules_enabled", "modules_disabled"}
          }
          EOF
          
          if ! luacheck .; then
            echo "‚ùå Luacheck found issues"
            exit 1
          else
            echo "‚úÖ All Lua files passed luacheck"
          fi

  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install yamllint
        run: |
          pip install yamllint
          
      - name: Create yamllint config
        run: |
          cat > .yamllint.yml << 'EOF'
          extends: default
          
          rules:
            line-length:
              max: 120
              level: warning
            comments:
              min-spaces-from-content: 1
            document-start: disable
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no']
          EOF
          
      - name: Run yamllint
        run: |
          echo "Running yamllint on YAML files..."
          
          # Find YAML files
          yaml_files=$(find . -name "*.yml" -o -name "*.yaml" | grep -v ".git")
          
          if [ -z "$yaml_files" ]; then
            echo "No YAML files found"
            exit 0
          fi
          
          if ! yamllint $yaml_files; then
            echo "‚ùå YAML linting failed"
            exit 1
          else
            echo "‚úÖ All YAML files passed yamllint"
          fi

  json-lint:
    name: JSON Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Run JSON validation
        run: |
          echo "Validating JSON files..."
          
          json_files=$(find . -name "*.json" | grep -v ".git")
          
          if [ -z "$json_files" ]; then
            echo "No JSON files found"
            exit 0
          fi
          
          exit_code=0
          for file in $json_files; do
            echo "Checking: $file"
            if ! jq empty "$file" >/dev/null 2>&1; then
              echo "‚ùå Invalid JSON: $file"
              exit_code=1
            else
              echo "‚úÖ Valid JSON: $file"
            fi
          done
          
          if [ $exit_code -ne 0 ]; then
            echo "‚ùå JSON validation failed"
            exit 1
          else
            echo "‚úÖ All JSON files are valid"
          fi

  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          config: .markdownlint.yml
          fix: true
          globs: '**/*.md'

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: .hadolint.yaml

  sql-lint:
    name: SQL Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install sqlfluff
        run: |
          pip install sqlfluff
          
      - name: Create sqlfluff config
        run: |
          cat > .sqlfluff << 'EOF'
          [sqlfluff]
          dialect = postgres
          templater = jinja
          max_line_length = 120
          
          [sqlfluff:rules:capitalisation.keywords]
          capitalisation_policy = upper
          EOF
          
      - name: Run sqlfluff
        run: |
          echo "Running sqlfluff on SQL files..."
          
          sql_files=$(find . -name "*.sql" | grep -v ".git")
          
          if [ -z "$sql_files" ]; then
            echo "No SQL files found"
            exit 0
          fi
          
          if ! sqlfluff lint $sql_files; then
            echo "‚ùå SQL linting failed"
            echo "Run 'sqlfluff fix .' to auto-fix issues"
            exit 1
          else
            echo "‚úÖ All SQL files passed sqlfluff"
          fi 