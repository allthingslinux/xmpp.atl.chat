name: Docker Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'core/config/**'
      - 'scripts/**'
      - 'docker-compose*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'core/config/**'
      - 'scripts/**'
      - 'docker-compose*.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-size: ${{ steps.size.outputs.size }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            
      - name: Get image size
        id: size
        run: |
          # Get image size
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep prosody | head -1
          size=$(docker images --format "{{.Size}}" | head -1)
          echo "size=$size" >> $GITHUB_OUTPUT
          echo "Image size: $size"

  docker-test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: prosody:test
          cache-from: type=gha
          
      - name: Test Docker image structure
        run: |
          echo "Testing Docker image structure..."
          
          # Test that image was built
          docker images prosody:test
          
          # Test that expected files exist
          echo "Checking for required files..."
          docker run --rm prosody:test ls -la /etc/prosody/prosody.cfg.lua
          docker run --rm prosody:test ls -la /usr/local/bin/entrypoint.sh
          docker run --rm prosody:test ls -la /usr/local/bin/health-check.sh
          docker run --rm prosody:test ls -la /usr/local/bin/prosody-manager
          
          # Test that prosody user exists
          echo "Checking prosody user..."
          docker run --rm prosody:test id prosody
          
          # Test that required packages are installed
          echo "Checking installed packages..."
          docker run --rm prosody:test prosody --version
          docker run --rm prosody:test lua5.4 -v
          
          # Test that community modules are installed
          echo "Checking community modules..."
          docker run --rm prosody:test ls -la /usr/local/lib/prosody/modules/mod_cloud_notify
          docker run --rm prosody:test ls -la /usr/local/lib/prosody/modules/mod_firewall
          
          echo "✅ Docker image structure tests passed"
          
      - name: Test Docker image security
        run: |
          echo "Testing Docker image security..."
          
          # Test that container doesn't run as root
          user_id=$(docker run --rm prosody:test id -u)
          if [ "$user_id" = "0" ]; then
            echo "❌ Container is running as root"
            exit 1
          else
            echo "✅ Container running as non-root user (UID: $user_id)"
          fi
          
          # Test file permissions
          echo "Checking file permissions..."
          docker run --rm prosody:test ls -la /etc/prosody/prosody.cfg.lua | grep "prosody"
          
          # Test that sensitive directories are not world-writable
          docker run --rm prosody:test find /etc /usr -type d -perm -002 2>/dev/null | head -5
          
          echo "✅ Docker image security tests passed"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create test environment
        run: |
          # Create test .env file
          cat > .env.test << EOF
          PROSODY_DOMAIN=test.localhost
          PROSODY_ADMINS=admin@test.localhost
          PROSODY_DB_PASSWORD=test_password_123
          POSTGRES_PASSWORD=test_password_123
          POSTGRES_USER=prosody
          POSTGRES_DB=prosody
          PROSODY_LOG_LEVEL=debug
          PROSODY_ALLOW_REGISTRATION=true
          EOF
          
      - name: Start test environment
        run: |
          # Use test environment file
          cp .env.test .env
          
          # Start services
          docker compose up -d xmpp-prosody xmpp-postgres
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
      - name: Test service health
        run: |
          echo "Testing service health..."
          
          # Check that containers are running
          docker compose ps
          
          # Check prosody health
          if docker compose exec -T xmpp-prosody prosodyctl status; then
            echo "✅ Prosody is running"
          else
            echo "❌ Prosody health check failed"
            docker compose logs xmpp-prosody
            exit 1
          fi
          
          # Check database connection
          if docker compose exec -T xmpp-prosody prosodyctl check config; then
            echo "✅ Prosody configuration is valid"
          else
            echo "❌ Prosody configuration check failed"
            docker compose logs xmpp-prosody
            exit 1
          fi
          
          # Test database connectivity
          if docker compose exec -T xmpp-postgres pg_isready -U prosody; then
            echo "✅ Database is ready"
          else
            echo "❌ Database check failed"
            docker compose logs xmpp-postgres
            exit 1
          fi
          
      - name: Test XMPP functionality
        run: |
          echo "Testing XMPP functionality..."
          
          # Test user creation
          if docker compose exec -T xmpp-prosody prosodyctl adduser testuser@test.localhost; then
            echo "✅ User creation successful"
          else
            echo "❌ User creation failed"
            exit 1
          fi
          
          # Test user listing
          if docker compose exec -T xmpp-prosody prosodyctl list users test.localhost | grep -q testuser; then
            echo "✅ User listing successful"
          else
            echo "❌ User not found in listing"
            exit 1
          fi
          
          # Test module loading
          if docker compose exec -T xmpp-prosody prosodyctl check modules; then
            echo "✅ Module check successful"
          else
            echo "❌ Module check failed"
            exit 1
          fi
          
      - name: Test network connectivity
        run: |
          echo "Testing network connectivity..."
          
          # Test that ports are accessible
          timeout 10 bash -c 'until nc -z localhost 5222; do sleep 1; done' && echo "✅ Port 5222 accessible"
          timeout 10 bash -c 'until nc -z localhost 5280; do sleep 1; done' && echo "✅ Port 5280 accessible"
          
          # Test HTTP endpoints
          if curl -f -s http://localhost:5280/http-bind >/dev/null; then
            echo "✅ BOSH endpoint accessible"
          else
            echo "⚠️  BOSH endpoint not accessible (may be expected)"
          fi
          
      - name: Cleanup test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v
          docker system prune -f

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start test environment
        run: |
          # Create minimal .env for performance testing
          cat > .env << EOF
          PROSODY_DOMAIN=perf.localhost
          PROSODY_ADMINS=admin@perf.localhost
          PROSODY_DB_PASSWORD=perf_password_123
          POSTGRES_PASSWORD=perf_password_123
          POSTGRES_USER=prosody
          POSTGRES_DB=prosody
          EOF
          
          # Start services
          docker compose up -d xmpp-prosody xmpp-postgres
          sleep 30
          
      - name: Performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          
          # Memory usage test
          memory_usage=$(docker stats --no-stream --format "{{.MemUsage}}" xmpp-prosody | cut -d'/' -f1)
          echo "Memory usage: $memory_usage"
          
          # CPU usage test
          cpu_usage=$(docker stats --no-stream --format "{{.CPUPerc}}" xmpp-prosody)
          echo "CPU usage: $cpu_usage"
          
          # Startup time test
          start_time=$(docker inspect xmpp-prosody --format='{{.State.StartedAt}}')
          echo "Container started at: $start_time"
          
          # Create multiple users to test performance
          echo "Creating test users..."
          for i in {1..10}; do
            docker compose exec -T xmpp-prosody prosodyctl adduser "user$i@perf.localhost" >/dev/null 2>&1
          done
          
          # Test user listing performance
          time docker compose exec -T xmpp-prosody prosodyctl list users perf.localhost
          
          echo "✅ Performance tests completed"
          
      - name: Cleanup performance test
        if: always()
        run: |
          docker compose down -v

  image-scan:
    name: Image Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test, integration-test, performance-test]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Test | ${{ needs.docker-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Test | ${{ needs.performance-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Size:** ${{ needs.docker-build.outputs.image-size }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Multi-architecture support:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY 