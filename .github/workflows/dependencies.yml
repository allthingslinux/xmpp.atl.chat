name: Dependencies & License Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'renovate.json'
      - '**/*.lua'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'renovate.json'
      - '**/*.lua'
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check Docker base image updates
        run: |
          echo "Checking for Docker base image updates..."
          
          # Extract base image from Dockerfile
          base_image=$(grep "^FROM " Dockerfile | head -1 | awk '{print $2}')
          echo "Current base image: $base_image"
          
          # Check if using latest tag (not recommended)
          if echo "$base_image" | grep -q ":latest"; then
            echo "‚ö†Ô∏è  Using :latest tag is not recommended for production"
          fi
          
          # Check for Debian security updates
          if echo "$base_image" | grep -q "debian"; then
            echo "‚úÖ Using Debian base image"
            echo "üí° Consider checking Debian security advisories regularly"
          fi
          
      - name: Check Prosody version
        run: |
          echo "Checking Prosody version information..."
          
          # Check if Prosody version is pinned in Dockerfile
          if grep -q "PROSODY_VERSION" Dockerfile; then
            version=$(grep "PROSODY_VERSION" Dockerfile | cut -d'=' -f2)
            echo "Prosody version: $version"
          else
            echo "‚ö†Ô∏è  Prosody version not explicitly pinned"
          fi
          
          # Check for build dependencies
          echo "Build dependencies found:"
          grep -E "(apt-get install|luarocks install)" Dockerfile || echo "No explicit dependencies found"
          
      - name: Check Lua dependencies
        run: |
          echo "Checking Lua dependencies..."
          
          # Look for Lua package installations
          if grep -q "luarocks install" Dockerfile; then
            echo "LuaRocks packages found:"
            grep "luarocks install" Dockerfile
          else
            echo "No LuaRocks packages found in Dockerfile"
          fi
          
          # Check for system Lua packages
          if grep -q "lua-" Dockerfile; then
            echo "System Lua packages found:"
            grep -o "lua-[a-z-]*" Dockerfile | sort | uniq
          fi
          
      - name: Check for security updates
        run: |
          echo "Checking for potential security updates..."
          
          # Check if apt-get update is run before install
          if grep -A5 "apt-get update" Dockerfile | grep -q "apt-get install"; then
            echo "‚úÖ Package cache updated before installation"
          else
            echo "‚ö†Ô∏è  Package cache may not be updated before installation"
          fi
          
          # Check for cache cleanup
          if grep -q "apt-get clean\|rm -rf /var/lib/apt/lists" Dockerfile; then
            echo "‚úÖ Package cache cleaned up"
          else
            echo "‚ö†Ô∏è  Package cache not cleaned up (increases image size)"
          fi

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check project license
        run: |
          echo "Checking project license compliance..."
          
          # Check for LICENSE file
          if [ -f "LICENSE" ] || [ -f "LICENSE.txt" ] || [ -f "LICENSE.md" ]; then
            echo "‚úÖ License file found"
            ls -la LICENSE* 2>/dev/null || true
          else
            echo "‚ö†Ô∏è  No LICENSE file found"
          fi
          
          # Check for license headers in code files
          echo "Checking for license headers in source files..."
          
          # Check shell scripts
          shell_files_without_license=0
          for file in $(find . -name "*.sh" -not -path "./.git/*"); do
            if ! head -10 "$file" | grep -qi "license\|copyright"; then
              shell_files_without_license=$((shell_files_without_license + 1))
            fi
          done
          
          if [ $shell_files_without_license -gt 0 ]; then
            echo "‚ö†Ô∏è  $shell_files_without_license shell files without license headers"
          else
            echo "‚úÖ All shell files have license information"
          fi
          
          # Check Lua files
          lua_files_without_license=0
          for file in $(find . -name "*.lua" -not -path "./.git/*"); do
            if ! head -10 "$file" | grep -qi "license\|copyright"; then
              lua_files_without_license=$((lua_files_without_license + 1))
            fi
          done
          
          if [ $lua_files_without_license -gt 0 ]; then
            echo "‚ö†Ô∏è  $lua_files_without_license Lua files without license headers"
          else
            echo "‚úÖ All Lua files have license information"
          fi
          
      - name: Check third-party licenses
        run: |
          echo "Checking third-party component licenses..."
          
          # Check Prosody license (MIT)
          echo "Prosody: MIT License (https://prosody.im/source)"
          
          # Check PostgreSQL license
          echo "PostgreSQL: PostgreSQL License (BSD-style)"
          
          # Check Docker base image license
          echo "Debian: Debian Free Software Guidelines (DFSG)"
          
          # List community modules and their licenses
          echo "Community modules (check individual licenses):"
          if grep -o "mod_[a-z_]*" core/config/prosody.cfg.lua 2>/dev/null | sort | uniq; then
            echo "üí° Verify licenses for community modules at https://modules.prosody.im/"
          fi
          
      - name: Generate license report
        run: |
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Components" >> $GITHUB_STEP_SUMMARY
          echo "- **Prosody XMPP Server**: MIT License" >> $GITHUB_STEP_SUMMARY
          echo "- **PostgreSQL**: PostgreSQL License (BSD-style)" >> $GITHUB_STEP_SUMMARY
          echo "- **Debian Base Image**: DFSG Compliant" >> $GITHUB_STEP_SUMMARY
          echo "- **Community Modules**: Various (check individual modules)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Add LICENSE file if missing" >> $GITHUB_STEP_SUMMARY
          echo "- Add license headers to source files" >> $GITHUB_STEP_SUMMARY
          echo "- Document third-party licenses" >> $GITHUB_STEP_SUMMARY
          echo "- Review community module licenses" >> $GITHUB_STEP_SUMMARY

  renovate-config-check:
    name: Renovate Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Renovate configuration
        run: |
          echo "Checking Renovate configuration..."
          
          if [ -f "renovate.json" ]; then
            echo "‚úÖ Renovate configuration found"
            
            # Validate JSON syntax
            if jq empty renovate.json >/dev/null 2>&1; then
              echo "‚úÖ Renovate configuration is valid JSON"
            else
              echo "‚ùå Renovate configuration has invalid JSON syntax"
              exit 1
            fi
            
            # Check for important settings
            if jq -r '.extends[]?' renovate.json | grep -q "config:base"; then
              echo "‚úÖ Using base Renovate configuration"
            else
              echo "‚ö†Ô∏è  Not using base Renovate configuration"
            fi
            
            # Check for security updates
            if jq -r '.vulnerabilityAlerts.enabled?' renovate.json | grep -q "true"; then
              echo "‚úÖ Vulnerability alerts enabled"
            else
              echo "‚ö†Ô∏è  Vulnerability alerts not explicitly enabled"
            fi
            
            echo "Current Renovate configuration:"
            cat renovate.json
            
          else
            echo "‚ö†Ô∏è  No Renovate configuration found"
            echo "üí° Consider adding renovate.json for automated dependency updates"
          fi
          
      - name: Check for dependency update patterns
        run: |
          echo "Checking for common dependency update patterns..."
          
          # Check if Docker images are configured for updates
          if [ -f "renovate.json" ] && jq -r '.docker.enabled?' renovate.json | grep -q "true"; then
            echo "‚úÖ Docker image updates enabled in Renovate"
          else
            echo "‚ö†Ô∏è  Docker image updates not configured"
          fi
          
          # Check for GitHub Actions updates
          if [ -f "renovate.json" ] && jq -r '.github-actions.enabled?' renovate.json | grep -q "true"; then
            echo "‚úÖ GitHub Actions updates enabled in Renovate"
          else
            echo "‚ö†Ô∏è  GitHub Actions updates not configured"
          fi

  security-advisories:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for known security advisories
        run: |
          echo "Checking for known security advisories..."
          
          # Check Prosody security advisories
          echo "Prosody Security Advisories:"
          echo "üí° Check https://prosody.im/security/ for latest security updates"
          
          # Check PostgreSQL security advisories
          echo "PostgreSQL Security Advisories:"
          echo "üí° Check https://www.postgresql.org/support/security/ for latest security updates"
          
          # Check Debian security advisories
          echo "Debian Security Advisories:"
          echo "üí° Check https://www.debian.org/security/ for latest security updates"
          
          # Check for pinned versions that might need updates
          echo "Version pinning check:"
          if grep -E "(FROM.*:|apt-get install.*=)" Dockerfile; then
            echo "‚ö†Ô∏è  Found pinned versions - check for security updates"
            grep -E "(FROM.*:|apt-get install.*=)" Dockerfile
          else
            echo "‚úÖ No explicitly pinned versions found"
          fi
          
      - name: Generate security advisory report
        run: |
          echo "## Security Advisory Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Regular Security Checks Required" >> $GITHUB_STEP_SUMMARY
          echo "- **Prosody**: https://prosody.im/security/" >> $GITHUB_STEP_SUMMARY
          echo "- **PostgreSQL**: https://www.postgresql.org/support/security/" >> $GITHUB_STEP_SUMMARY
          echo "- **Debian**: https://www.debian.org/security/" >> $GITHUB_STEP_SUMMARY
          echo "- **Community Modules**: Check individual module repositories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Automated Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- Enable Dependabot/Renovate for automated updates" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor GitHub Security Advisories" >> $GITHUB_STEP_SUMMARY
          echo "- Subscribe to security mailing lists" >> $GITHUB_STEP_SUMMARY

  dependency-summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, license-check, renovate-config-check, security-advisories]
    if: always()
    
    steps:
      - name: Generate dependency summary
        run: |
          echo "## Dependencies & License Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Renovate Config | ${{ needs.renovate-config-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Advisories | ${{ needs.security-advisories.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any warnings from dependency checks" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Consider enabling automated dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all licenses are properly documented" >> $GITHUB_STEP_SUMMARY 